"""
Django settings for demowebapp project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
        "config": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
    },
}

# Azure Monitor integration - using OpenCensus instead of OpenTelemetry for Python 3.9 compatibility
ENABLE_AZURE_MONITOR = os.getenv("ENABLE_AZURE_MONITOR", "False").lower() in ("true", "1", "t")

if ENABLE_AZURE_MONITOR:
    try:
        # Use OpenCensus instead of OpenTelemetry for better Python 3.9 compatibility
        connection_string = os.getenv("APPLICATIONINSIGHTS_CONNECTION_STRING")
        if connection_string:
            import logging

            from opencensus.ext.azure.log_exporter import AzureLogHandler

            # Add Azure handler to the root logger
            azure_handler = AzureLogHandler(connection_string=connection_string)
            azure_handler.setLevel(logging.INFO)

            # Get the root logger and add our handler
            root_logger = logging.getLogger()
            root_logger.addHandler(azure_handler)

            print("Azure Monitor configured successfully using OpenCensus")
        else:
            print("Warning: APPLICATIONINSIGHTS_CONNECTION_STRING not set, skipping Azure Monitor")
            ENABLE_AZURE_MONITOR = False

    except ImportError:
        print("Warning: OpenCensus Azure libraries not available, trying OpenTelemetry fallback")
        # Fallback to OpenTelemetry only if OpenCensus is not available
        try:
            from azure.monitor.opentelemetry import configure_azure_monitor

            configure_azure_monitor(
                connection_string=os.getenv("APPLICATIONINSIGHTS_CONNECTION_STRING"),
                enable_live_metrics=os.getenv("ENABLE_LIVE_METRICS", "False").lower() in ("true", "1", "t"),
                resource_attributes={
                    "service.name": "demo-webapp",
                    "service.version": "1.0.0",
                },
            )
            print("Azure Monitor configured successfully using OpenTelemetry fallback")

        except Exception as e:
            print(f"Warning: Both OpenCensus and OpenTelemetry configuration failed: {e}")
            ENABLE_AZURE_MONITOR = False

    except Exception as e:
        print(f"Warning: Failed to configure Azure Monitor with OpenCensus: {e}")
        ENABLE_AZURE_MONITOR = False

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "yourpassword")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "True").lower() in ("true", "1", "t")

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "").split(",")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "api.apps.ApiConfig",
    "tasks.apps.TasksConfig",
    "rest_framework",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "demowebapp.middleware.DatabaseHealthCheckMiddleware",  # Database health check middleware
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "demowebapp.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "demowebapp.context_processors.backend_address",
            ],
        },
    },
]

WSGI_APPLICATION = "demowebapp.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DB_HOST = os.getenv("DB_HOST", "localhost")
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME", "postgres"),
        "USER": os.getenv("DB_USER", "dbuser"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": DB_HOST,
        "PORT": os.getenv("DB_PORT", "5432"),
        "OPTIONS": {
            "connect_timeout": 30,  # Connection timeout in seconds
            "options": "-c statement_timeout=30000",  # Query timeout in milliseconds (30 seconds)
        },
        "CONN_MAX_AGE": 0,  # Don't persist connections to avoid hanging on dead connections
        "CONN_HEALTH_CHECKS": True,  # Enable connection health checks (Django 4.1+)
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = os.getenv("TIME_ZONE", "Europe/Zurich")

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

STATIC_ROOT = os.path.join(BASE_DIR, "static/")

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_ALLOW_HEADERS = "*"

BACKEND_ADDRESS = os.getenv("BACKEND_ADDRESS", "http://localhost:8000")
BACKEND_SAME_HOST = os.getenv("BACKEND_SAME_HOST", "True")  # define if the backend is on the same host as the frontend

CORS_ALLOW_ALL_ORIGINS = os.getenv("CORS_ALLOW_ALL_ORIGINS", "True").lower() in ("true", "1", "t")

CSRF_TRUSTED_ORIGINS = [os.getenv("CSRF_TRUSTED_ORIGINS", "http://*.krfa-lab.com:8000")]

# Authentication settings
LOGIN_URL = "/auth/login/"
LOGIN_REDIRECT_URL = "/chatbot/"
LOGOUT_REDIRECT_URL = "/"

# Session settings
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
