"""
Django settings for demowebapp project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
        "config": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
    },
}

# Azure Monitor integration - Modern OpenTelemetry approach with OpenCensus fallback
ENABLE_AZURE_MONITOR = os.getenv("ENABLE_AZURE_MONITOR", "False").lower() in ("true", "1", "t")

if ENABLE_AZURE_MONITOR:
    connection_string = os.getenv("APPLICATIONINSIGHTS_CONNECTION_STRING")
    if not connection_string:
        print("Warning: APPLICATIONINSIGHTS_CONNECTION_STRING not set, skipping Azure Monitor")
        ENABLE_AZURE_MONITOR = False
    else:
        # Try optimized OpenTelemetry approach for better performance
        try:
            from demowebapp.opentelemetry_config import (
                configure_opentelemetry_logging,
                configure_opentelemetry_metrics,
                configure_opentelemetry_safe,
                configure_selective_instrumentation,
            )

            # Configure optimized OpenTelemetry for tracing, logging, and metrics
            telemetry_configured = configure_opentelemetry_safe()
            logging_configured = configure_opentelemetry_logging()

            # Only enable metrics if explicitly requested
            metrics_enabled = os.getenv("AZURE_MONITOR_ENABLE_METRICS", "false").lower() == "true"
            if metrics_enabled:
                metrics_configured = configure_opentelemetry_metrics()
            else:
                metrics_configured = True  # Skip metrics to save resources

            if telemetry_configured and logging_configured:
                print("✅ Azure Monitor configured successfully using optimized OpenTelemetry")
                if metrics_enabled and metrics_configured:
                    print("✅ Optimized metrics collection enabled")
                elif metrics_enabled:
                    print("⚠️ Metrics collection failed, but tracing and logging are working")
                else:
                    print("ℹ️ Metrics collection disabled for performance optimization")

                # Enable selective automatic instrumentation
                try:
                    instrumentation_configured = configure_selective_instrumentation()
                    if instrumentation_configured:
                        print("✅ Selective auto-instrumentation enabled for performance")
                except Exception as e:
                    print(f"Warning: Selective auto-instrumentation setup failed: {e}")
            else:
                raise Exception("Optimized OpenTelemetry configuration failed")

        except Exception as otel_error:
            print(f"Warning: OpenTelemetry configuration failed: {otel_error}")
            print("Falling back to OpenCensus for logging only...")

            # Fallback to OpenCensus for basic logging
            try:
                import logging

                from opencensus.ext.azure.log_exporter import AzureLogHandler

                azure_handler = AzureLogHandler(connection_string=connection_string)
                azure_handler.setLevel(logging.INFO)

                root_logger = logging.getLogger()
                root_logger.addHandler(azure_handler)

                print("⚠️ Azure Monitor configured with OpenCensus fallback (logging only)")

            except Exception as opencensus_error:
                print(f"❌ Both OpenTelemetry and OpenCensus configuration failed: {opencensus_error}")
                ENABLE_AZURE_MONITOR = False

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "yourpassword")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "True").lower() in ("true", "1", "t")

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "").split(",")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "api.apps.ApiConfig",
    "tasks.apps.TasksConfig",
    "rest_framework",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "demowebapp.middleware.DatabaseHealthCheckMiddleware",  # Database health check middleware
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "demowebapp.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "demowebapp.context_processors.backend_address",
                "demowebapp.context_processors.app_version",
            ],
        },
    },
]

WSGI_APPLICATION = "demowebapp.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DB_HOST = os.getenv("DB_HOST", "localhost")
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME", "postgres"),
        "USER": os.getenv("DB_USER", "dbuser"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": DB_HOST,
        "PORT": os.getenv("DB_PORT", "5432"),
        "OPTIONS": {
            "connect_timeout": int(os.getenv("DB_OPTIONS_CONNECT_TIMEOUT", "30")),
            "options": f"-c statement_timeout={os.getenv('DB_OPTIONS_STATEMENT_TIMEOUT', '30000')}",
        },
        "CONN_MAX_AGE": int(os.getenv("DB_CONN_MAX_AGE", "0")),  # Connection pooling
        "CONN_HEALTH_CHECKS": True,  # Enable connection health checks (Django 4.1+)
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = os.getenv("TIME_ZONE", "Europe/Zurich")

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

STATIC_ROOT = os.path.join(BASE_DIR, "static/")

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_ALLOW_HEADERS = "*"

BACKEND_ADDRESS = os.getenv("BACKEND_ADDRESS", "http://localhost:8000")
BACKEND_SAME_HOST = os.getenv("BACKEND_SAME_HOST", "True")  # define if the backend is on the same host as the frontend

CORS_ALLOW_ALL_ORIGINS = os.getenv("CORS_ALLOW_ALL_ORIGINS", "True").lower() in ("true", "1", "t")

CSRF_TRUSTED_ORIGINS = [os.getenv("CSRF_TRUSTED_ORIGINS", "http://*.krfa-lab.com:8000")]

# Authentication settings
LOGIN_URL = "/auth/login/"
LOGIN_REDIRECT_URL = "/chatbot/"
LOGOUT_REDIRECT_URL = "/"

# Session settings - Performance optimized
SESSION_ENGINE = os.getenv("SESSION_ENGINE", "django.contrib.sessions.backends.db")
SESSION_COOKIE_AGE = int(os.getenv("SESSION_COOKIE_AGE", "3600"))  # Default 1 hour
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = os.getenv("SESSION_SAVE_EVERY_REQUEST", "True").lower() in ("true", "1", "t")
