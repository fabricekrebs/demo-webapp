name: CI - Run Tests

# Trigger the workflow on push and pull requests
on:
  push:
    branches: [ '*' ]  # Run on any branch
  pull_request:
    branches: [ '*' ]  # Run on PRs to any branch
  
  # Allow manual trigger
  workflow_dispatch:

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    
    # Service containers to run with `test`
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: test_demo_webapp
          POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up environment variables
      run: |
        echo "DJANGO_SETTINGS_MODULE=demowebapp.test_settings" >> $GITHUB_ENV
        echo "CI=true" >> $GITHUB_ENV
        echo "GITHUB_ACTIONS=true" >> $GITHUB_ENV
        echo "DEBUG=False" >> $GITHUB_ENV

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U testuser -d test_demo_webapp; do
          echo "Waiting for PostgreSQL..."
          sleep 3
        done
        echo "PostgreSQL is ready!"

    - name: Verify database connection
      run: |
        PGPASSWORD=testpassword psql -h localhost -p 5432 -U testuser -d test_demo_webapp -c "SELECT version();"

    - name: Show migration status
      run: |
        python manage.py showmigrations --settings=demowebapp.test_settings

    - name: Run database migrations
      run: |
        python manage.py migrate --settings=demowebapp.test_settings

    - name: Check Django system
      run: |
        python manage.py check --settings=demowebapp.test_settings

    - name: Run unit tests
      run: |
        python manage.py test tests --verbosity=2 --settings=demowebapp.test_settings --keepdb --failfast

    - name: Generate test coverage report (optional)
      if: always()
      run: |
        pip install coverage
        coverage run --source='.' manage.py test tests --settings=demowebapp.test_settings --keepdb --failfast
        coverage report
        coverage xml

    - name: Upload coverage reports to Codecov (optional)
      if: always()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
        cache: 'pip'

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run Black (code formatting check)
      run: |
        black --check --diff .

    - name: Run isort (import sorting check)
      run: |
        isort --check-only --diff .

    - name: Run Flake8 (linting)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  security:
    name: Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
        cache: 'pip'

    - name: Install security scanning dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run pip-audit (dependency vulnerability check)
      run: |
        pip-audit

    - name: Run Bandit (security linting)
      run: |
        bandit -r . -x tests/,venv/,static/

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t demo-webapp-test:latest .

    - name: Test Docker image
      run: |
        docker run --rm -e DJANGO_SETTINGS_MODULE=demowebapp.test_settings demo-webapp-test:latest python manage.py check --settings=demowebapp.test_settings

  # Summary job that depends on all other jobs
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [test, lint, security, docker-build]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && 
              "${{ needs.lint.result }}" == "success" && 
              "${{ needs.security.result }}" == "success" && 
              "${{ needs.docker-build.result }}" == "success" ]]; then
          echo "✅ All CI checks passed!"
          exit 0
        else
          echo "❌ Some CI checks failed:"
          echo "Tests: ${{ needs.test.result }}"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Docker: ${{ needs.docker-build.result }}"
          exit 1
        fi
