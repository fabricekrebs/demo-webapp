name: Build and Release

on:
  push:
    branches: 
      - main
      - develop
  
  # Allow manual trigger with environment selection
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

env:
  REGISTRY: acritalynorth01.azurecr.io
  IMAGE_NAME: demo-webapp

jobs:
  # Wait for CI tests to complete (if triggered by push)
  wait-for-tests:
    name: Wait for CI Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      tests-passed: ${{ steps.check.outputs.result }}
    steps:
      - name: Check CI status via API
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.sha;
            
            // Wait for checks to complete
            let attempts = 0;
            const maxAttempts = 30; // 5 minutes max wait
            
            while (attempts < maxAttempts) {
              try {
                const { data: checks } = await github.rest.checks.listForRef({
                  owner,
                  repo,
                  ref: sha,
                  status: 'completed'
                });
                
                // Look for CI test checks
                const ciChecks = checks.check_runs.filter(check => 
                  check.name.includes('Run Unit Tests') || 
                  check.name === 'test'
                );
                
                console.log(`Found ${ciChecks.length} CI-related checks`);
                
                if (ciChecks.length > 0) {
                  const allPassed = ciChecks.every(check => check.conclusion === 'success');
                  const anyFailed = ciChecks.some(check => check.conclusion === 'failure');
                  
                  if (allPassed) {
                    console.log('✅ All CI tests passed');
                    return 'success';
                  } else if (anyFailed) {
                    console.log('❌ Some CI tests failed');
                    return 'failure';
                  }
                }
                
                console.log(`Attempt ${attempts + 1}/${maxAttempts}: Waiting for CI tests...`);
                await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 10 seconds
                attempts++;
              } catch (error) {
                console.log(`Error checking CI status: ${error.message}`);
                attempts++;
                await new Promise(resolve => setTimeout(resolve, 10000));
              }
            }
            
            console.log('⏰ Timeout waiting for CI tests');
            return 'timeout';
      
      - name: Check test result
        run: |
          RESULT="${{ steps.check.outputs.result }}"
          echo "CI test result: ${RESULT}"
          
          if [[ "${RESULT}" == "success" ]]; then
            echo "✅ CI tests passed - continuing with build"
          elif [[ "${RESULT}" == "failure" ]]; then
            echo "❌ CI tests failed"
            exit 1
          elif [[ "${RESULT}" == "timeout" ]]; then
            echo "⏰ Timeout waiting for CI tests - proceeding anyway"
            echo "Warning: Could not verify CI test status"
          else
            echo "❌ Unknown CI test status: ${RESULT}"
            exit 1
          fi

  # Determine target environment
  determine-environment:
    runs-on: ubuntu-latest
    needs: [wait-for-tests]
    if: always() && (needs.wait-for-tests.result != 'failure' || github.event_name == 'workflow_dispatch')
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      should-build: ${{ steps.should-build.outputs.result }}
    steps:
      - name: Debug job inputs
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Wait-for-tests result: ${{ needs.wait-for-tests.result }}"
          echo "Wait-for-tests outputs.tests-passed: ${{ needs.wait-for-tests.outputs.tests-passed }}"
      
      - id: should-build
        run: |
          # Always build for workflow_dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "result=true" >> $GITHUB_OUTPUT
            echo "Manual trigger - building"
            exit 0
          fi
          
          # For push events, check if wait-for-tests job succeeded
          if [[ "${{ needs.wait-for-tests.result }}" == "success" ]]; then
            echo "result=true" >> $GITHUB_OUTPUT
            echo "CI tests passed - building"
          else
            echo "result=false" >> $GITHUB_OUTPUT
            echo "CI tests did not pass or were skipped - skipping build"
          fi

      - id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "develop" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

  # First, run semantic release to determine/create versions
  semantic-release:
    name: Semantic Release
    needs: [determine-environment]
    if: needs.determine-environment.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release.outputs.version }}
      is-release: ${{ steps.release.outputs.is-release }}
      should-build-container: ${{ steps.release.outputs.should-build-container }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for semantic-release
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

      - name: Determine version and create release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            # On main branch, check if release is needed first
            npx semantic-release --dry-run --no-ci > release-output.txt 2>&1 || true
            
            if grep -q "The next release version is" release-output.txt; then
              # Release is needed, create it
              echo "Release needed, creating release..."
              
              # Create .releaserc.json for actual release
              cat > .releaserc.json << EOF
          {
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              ["@semantic-release/git", {
                "assets": ["CHANGELOG.md"],
                "message": "chore(release): \${nextRelease.version} [skip ci]\n\n\${nextRelease.notes}"
              }],
              "@semantic-release/github"
            ]
          }
          EOF
              
              # Run semantic release
              npx semantic-release
              
              # Get the version that was just released
              VERSION=$(git describe --tags --abbrev=0)
              echo "version=${VERSION}" >> $GITHUB_OUTPUT
              echo "is-release=true" >> $GITHUB_OUTPUT
              echo "should-build-container=true" >> $GITHUB_OUTPUT
              echo "Created release: ${VERSION}"
            else
              # No release needed, use commit SHA for development build
              VERSION="${{ github.sha }}"
              echo "version=${VERSION}" >> $GITHUB_OUTPUT
              echo "is-release=false" >> $GITHUB_OUTPUT
              echo "should-build-container=true" >> $GITHUB_OUTPUT
              echo "Development build: ${VERSION}"
            fi
          else
            # On develop branch, use branch name + commit
            VERSION="develop-${{ github.sha }}"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is-release=false" >> $GITHUB_OUTPUT
            echo "should-build-container=true" >> $GITHUB_OUTPUT
            echo "Development version: ${VERSION}"
          fi

  build-and-push:
    name: Build and Push Container
    needs: [semantic-release]
    if: needs.semantic-release.outputs.should-build-container == 'true'
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      version: ${{ needs.semantic-release.outputs.version }}
      is-release: ${{ needs.semantic-release.outputs.is-release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.DEMOWEBAPP_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.DEMOWEBAPP_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.DEMOWEBAPP_AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        run: |
          az acr login --name acritalynorth01

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.semantic-release.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-latest
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=Demo Web Application
            org.opencontainers.image.version=${{ needs.semantic-release.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-manifests:
    name: Update Kubernetes Manifests
    needs: [build-and-push, semantic-release]
    if: always() && needs.build-and-push.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update manifests
        run: |
          VERSION="${{ needs.semantic-release.outputs.version || needs.build-and-push.outputs.version }}"
          ENVIRONMENT="${{ github.ref_name }}"
          
          echo "Updating manifests for version: $VERSION on branch: $ENVIRONMENT"
          
          # Update the image tag in base kustomization
          sed -i "s|newTag: .*|newTag: ${VERSION}|g" manifests/base/kustomization.yaml
          
          # Check if there are changes to commit
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add manifests/
            
            if [[ "${{ github.ref_name }}" == "main" ]] && [[ "${{ needs.semantic-release.outputs.is-release }}" == "true" ]]; then
              git commit -m "chore: update manifests to version $VERSION [skip ci]"
            else
              git commit -m "chore: update manifests for $ENVIRONMENT build $VERSION [skip ci]"
            fi
            
            git push
          fi

  deployment-status:
    name: Deployment Status
    needs: [determine-environment, semantic-release, build-and-push, update-manifests]
    if: always() && needs.determine-environment.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "## 🚀 Build and Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Semantic Release | ${{ needs.semantic-release.result }} | Version determination and release |" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Push | ${{ needs.build-and-push.result }} | Container image build |" >> $GITHUB_STEP_SUMMARY
          echo "| Manifest Update | ${{ needs.update-manifests.result }} | Kubernetes manifests |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.semantic-release.outputs.is-release }}" == "true" ]]; then
            echo "🎉 **Production Release**: ${{ needs.semantic-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "📦 **Container**: acritalynorth01.azurecr.io/demo-webapp:${{ needs.semantic-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "🔧 **Development Build**: ${{ needs.semantic-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "📦 **Container**: acritalynorth01.azurecr.io/demo-webapp:${{ needs.semantic-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Flux will automatically deploy the updated manifests to the AKS cluster." >> $GITHUB_STEP_SUMMARY
