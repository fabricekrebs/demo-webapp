name: Deploy to Azure Container Apps

# When this action will be executed
on:
  # Trigger after successful semantic release (production only)
  workflow_run:
    workflows: ["Production Release"]
    types:
      - completed
    branches: [main]  # Only deploy production releases

  # Allow manual trigger 
  workflow_dispatch:
    inputs:
      version:
        description: 'Container image version/tag to deploy'
        required: false
        default: 'latest'
        type: string

jobs:
  # Check if semantic release workflow was successful and created a release
  check-release-success:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run'
    outputs:
      should-deploy: ${{ steps.check.outputs.result }}
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Check workflow result
        id: check
        run: |
          if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "result=true" >> $GITHUB_OUTPUT
            echo "Semantic release workflow completed successfully"
          else
            echo "result=false" >> $GITHUB_OUTPUT
            echo "Semantic release workflow failed or was cancelled"
          fi

      - name: Get latest release version
        id: get-version
        if: steps.check.outputs.result == 'true'
        uses: actions/checkout@v4
        
      - name: Fetch latest tag
        if: steps.check.outputs.result == 'true'
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "latest")
          echo "version=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "Found version: ${LATEST_TAG}"

  deploy-to-container-apps:
    runs-on: ubuntu-latest
    needs: [check-release-success]
    if: always() && (needs.check-release-success.outputs.should-deploy == 'true' || github.event_name == 'workflow_dispatch')
    environment: 
      name: production-container-apps
      url: https://demo-webapp.your-container-apps-domain.com # Update with your Container Apps URL
    permissions: 
      id-token: write # Required for OIDC JWT Token
      contents: read
    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v4

      - name: Set deployment version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ needs.check-release-success.outputs.version }}"
          fi
          
          # Fallback to latest if no version found
          if [[ -z "$VERSION" || "$VERSION" == "null" ]]; then
            VERSION="latest"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Deploying version: ${VERSION}"

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.DEMOWEBAPP_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.DEMOWEBAPP_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.DEMOWEBAPP_AZURE_SUBSCRIPTION_ID }}

      - name: Verify container image exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Checking if image exists: acritalynorth01.azurecr.io/demo-webapp:${VERSION}"
          
          # Login to ACR
          az acr login --name acritalynorth01
          
          # Check if the image exists
          if az acr repository show-tags --name acritalynorth01 --repository demo-webapp --query "[?@ == '${VERSION}']" -o tsv | grep -q "${VERSION}"; then
            echo "✅ Container image found: acritalynorth01.azurecr.io/demo-webapp:${VERSION}"
          else
            echo "❌ Container image not found: acritalynorth01.azurecr.io/demo-webapp:${VERSION}"
            echo "Available tags:"
            az acr repository show-tags --name acritalynorth01 --repository demo-webapp --output table
            exit 1
          fi

      - name: Deploy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v2
        with:
          appSourcePath: ${{ github.workspace }}
          registryUrl: acritalynorth01.azurecr.io
          registryUsername: ${{ secrets.DEMOWEBAPP_REGISTRY_USERNAME }}
          registryPassword: ${{ secrets.DEMOWEBAPP_REGISTRY_PASSWORD }}
          containerAppName: demo-webapp
          resourceGroup: rg-italynorth-contapp-01
          imageToBuild: acritalynorth01.azurecr.io/demo-webapp:${{ steps.version.outputs.version }}

      - name: Deployment Summary
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "## 🚀 Container Apps Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Detail | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | Production (Container Apps) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Container Image** | acritalynorth01.azurecr.io/demo-webapp:${VERSION} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Resource Group** | rg-italynorth-contapp-01 |" >> $GITHUB_STEP_SUMMARY
          echo "| **Container App** | demo-webapp |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY


